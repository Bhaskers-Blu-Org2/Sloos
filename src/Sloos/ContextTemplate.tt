<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;
using System.Linq;
using System.Runtime.Serialization;

using Microsoft.EntityFrameworkCore;

namespace Spike.CodeGen
{
	public class Context : DbContext, IEntityPump
	{
		public Context(DbContextOptions options)
			: base(options)
		{
		}

		public DbSet<<#= this.RowName #>> <#= this.TableName #> { get; set; }

		/// <summary>
		///     Attempt to create the database and table if either or both do not exist.
		/// </summary>
		public void CreateIfNotExists()
		{
			// EnsureCreated creates the DB if it does not exist, and creates table(s) if *no*
			// tables exist.  If a new table is being created, but other tables already exist
			// EnsureCreated is a no-op hence the need to call CreateTables() in some cases.
			this.Database.EnsureCreated();
			var creator = (Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator)Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions.GetService<Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator>(this.Database);

            try
            {
				<#=this.TableName#>.Any();
            }
			catch (System.Data.SqlClient.SqlException e)
			{
				if (e.Number != 208)
				{
					throw;
				}

				creator.CreateTables();
			}
		}
	}

	[DataContract]
	public class <#= this.RowName #>
	{
		[Key]
		public long <#= this.Key #> { get; set; }

		<#
		foreach (var column in this.Columns)
		{
		#>
		[DataMember(Order = <#=column.Offset#>)] [Required] public <#=column.TypeName#> <#=column.Name#> { get; set; }
		<#
		}
		#>
	}
}

<#+
	public string RowName { get; set; }
	public string TableName { get; set; }

    public string Key { get; set; }
    public IEnumerable<Column> Columns { get; set; }
#>