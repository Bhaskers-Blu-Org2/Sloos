<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
namespace <#= this.ModelNamespace #>
{
    public partial class <#= this.Name #> : global::System.Data.Entity.DbContext
    {
        static <#= this.Name #>()
        {
            global::System.Data.Entity.Database.SetInitializer<<#= this.Name #>>(null);
        }

        public <#= this.Name #>(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
        }

<#
    foreach (var contextEntityView in this.ContextEntityViews)
    {
#>
        public global::System.Data.Entity.DbSet<global::<#= this.ModelNamespace #>.<#= contextEntityView.ConceptualName #>> <#= contextEntityView.StoreName#> { get; set; }
<#
    }
#>

        protected override void OnModelCreating(global::System.Data.Entity.DbModelBuilder modelBuilder)
        {
<#
    foreach (var contextEntityView in this.ContextEntityViews)
    {
#>
            modelBuilder.Configurations.Add(new global::<#= this.MappingNamespace #>.<#= contextEntityView.ConceptualMappingName #>());
<#
    }
#>
        }
    }
}

<#+
	public global::Sloos.Pump.TextTemplate.ContextFactory Factory { get; set; }	

	public string Name { get { return this.Factory.Name; } }
	public string ModelNamespace { get { return this.Factory.ModelNamespace; } }
	public string MappingNamespace { get { return this.Factory.MappingNamespace; } }
	public global::System.Collections.Generic.IEnumerable<global::Sloos.Pump.EntityFramework.ContextEntityView> ContextEntityViews { get { return this.Factory.ContextEntityViews; } }
#>
